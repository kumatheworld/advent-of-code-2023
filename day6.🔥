fn parse_ints(s: String) raises -> DynamicVector[Int]:
    let numbers_str = s.split(" ")
    var numbers = DynamicVector[Int]()
    for i in range(len(numbers_str)):
        try:
            numbers.append(atol(numbers_str[i]))
        except Error:
            pass
    return numbers


fn num_ways(time: Int, distance: Int) -> Int:
    var n = 0
    for j in range(time):
        if j * (time - j) > distance:
            n += 1
    return n


fn solve1(s: String) raises -> Int:
    let lines = s.split("\n")
    let times = parse_ints(lines[0])
    let distances = parse_ints(lines[1])
    var total = 1
    for i in range(len(times)):
        total *= num_ways(times[i], distances[i])
    return total


fn main() raises:
    print(solve1(example))
    print(solve1(text))


alias example = """Time:      7  15   30
Distance:  9  40  200
"""

alias text = """Time:        60     80     86     76
Distance:   601   1163   1559   1300
"""
