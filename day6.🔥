fn parse_ints(line: String) raises -> DynamicVector[Int]:
    let numbers_str = line.split(" ")
    var numbers = DynamicVector[Int]()
    for i in range(len(numbers_str)):
        try:
            numbers.append(atol(numbers_str[i]))
        except Error:
            pass
    return numbers


fn num_ways(time: Int, distance: Int) -> Int:
    # Direct solution by sqrt() would work if it accepted float or int64
    var a = 0
    var b = time
    while b - a > 1:
        let c = (a + b) // 2
        if c * (time - c) > distance:
            b = c
        else:
            a = c
    return time + 1 - 2 * b


fn solve1(s: String) raises -> Int:
    let lines = s.split("\n")
    let times = parse_ints(lines[0])
    let distances = parse_ints(lines[1])
    var total = 1
    for i in range(len(times)):
        total *= num_ways(times[i], distances[i])
    return total


fn parse_and_concat_ints(s: String) raises -> Int:
    let numbers = parse_ints(s)
    var number_str = String("")
    for i in range(len(numbers)):
        number_str += String(numbers[i])
    let number = atol(number_str)
    return number


fn solve2(s: String) raises -> Int:
    let lines = s.split("\n")
    let time = parse_and_concat_ints(lines[0])
    let distance = parse_and_concat_ints(lines[1])
    return num_ways(time, distance)


fn main() raises:
    print(solve1(example))
    print(solve1(text))
    print(solve2(example))
    print(solve2(text))


alias example = """Time:      7  15   30
Distance:  9  40  200
"""

alias text = """Time:        60     80     86     76
Distance:   601   1163   1559   1300
"""
